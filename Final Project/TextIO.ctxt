#BlueJ class context
comment0.target=TextIO
comment0.text=\r\n\ TAKEN\ FROM\ JAVA\r\n\ TextIO\ provides\ a\ set\ of\ static\ methods\ for\ reading\ and\ writing\ text.\ \ By\ default,\ it\ reads\r\n\ from\ standard\ input\ and\ writes\ to\ standard\ output,\ but\ it\ is\ possible\ to\ redirect\ the\ input\r\n\ and\ output\ to\ files\ or\ to\ other\ input\ and\ output\ streams.\ \ When\ the\ standard\ input\ and\ output\r\n\ streams\ are\ being\ used,\ the\ input\ methods\ will\ not\ produce\ an\ error;\ instead,\ the\ user\ is\r\n\ repeatedly\ prompted\ for\ input\ until\ a\ legal\ input\ is\ entered.\ \ (If\ standard\ input\ has\ been\r\n\ changed\ externally,\ as\ by\ file\ redirection\ on\ the\ command\ line,\ this\ is\ not\ a\ reasonable\r\n\ \r\n\ behavior;\ to\ handle\ this\ case,\ TextIO\ will\ give\ up\ after\ 10\ consecutive\ illegal\ inputs\ and\r\n\ will\ throw\ an\ IllegalArgumentException.)\ \ For\ the\ most\ part,\ any\ other\r\n\ error\ will\ be\ translated\ into\ an\ IllegalArguementException.\r\n\ <p>For\ writing\ to\ standard\ output,\ the\ output\ methods\ in\ this\ class\ pretty\ much\r\n\ duplicate\ the\ functionality\ of\ System.out,\ and\ System.out\ can\ be\ used\ interchangeably\ with\ them.\r\n\ <p>This\ class\ does\ not\ use\ optimal\ Java\ programming\ practices.\ \ It\ is\ designed\ specifically\ to\ be\ easily\r\n\ usable\ even\ by\ a\ beginning\ programmer\ who\ has\ not\ yet\ learned\ about\ objects\ and\ exceptions.\ \ Therefore,\ \r\n\ everything\ is\ in\ a\ single\ source\ file\ that\ compiles\ into\ a\ single\ class\ file,\ all\ the\ methods\ are\r\n\ static\ methods,\ and\ none\ of\ the\ methods\ throw\ exceptions\ that\ would\ require\ try...catch\ statements.\r\n\ Also\ for\ this\ reason,\ all\ exceptions\ are\ converted\ into\ IllegalArgumentExceptions,\ even\ when\ this\r\n\ exception\ type\ doesn't\ really\ make\ sense.\r\n\ <p>This\ class\ requires\ Java\ 5.0\ or\ higher.\ (A\ previous\ version\ of\ TextIO\ required\ only\ Java\ 1.1;\r\n\ this\ version\ should\ work\ with\ any\ source\ code\ that\ used\ the\ previous\ version,\ but\ it\ has\ some\ new\r\n\ features,\ including\ the\ type\ of\ formatted\ output\ that\ was\ introduced\ in\ Java\ 5\ and\ the\ ability\ to\r\n\ use\ files\ and\ streams.)\r\n\ <p>TextIO\ must\ be\ imported\ from\ package\ textio\ to\ be\ used.\ \ (Previous\ versions\ were\ in\ the\r\n\ default\ package.\ \ Alternatively,\ this\ class\ can\ be\ moved\ into\ the\ default\ package\ by\ deleting\r\n\ the\ "package"\ declaration\ on\ the\ first\ line\ of\ this\ file.\r\n
comment1.params=
comment1.target=void\ readStandardInput()
comment1.text=\r\n\ After\ this\ method\ is\ called,\ input\ will\ be\ read\ from\ standard\ input\ (as\ it\ \r\n\ is\ in\ the\ default\ state).\ \ If\ a\ file\ or\ stream\ was\ previously\ the\ input\ source,\ that\ file\r\n\ or\ stream\ is\ closed.\r\n
comment10.params=
comment10.target=boolean\ writeUserSelectedFile()
comment10.text=\r\n\ Puts\ a\ GUI\ file-selection\ dialog\ box\ on\ the\ screen\ in\ which\ the\ user\ can\ select\r\n\ an\ output\ file.\ \ If\ the\ user\ cancels\ the\ dialog\ instead\ of\ selecting\ a\ file,\ it\ is\r\n\ not\ considered\ an\ error,\ but\ the\ return\ value\ of\ the\ subroutine\ is\ false.\r\n\ If\ the\ user\ does\ select\ a\ file,\ but\ there\ is\ an\ error\ while\ trying\ to\ open\ the\r\n\ file,\ then\ an\ exception\ of\ type\ IllegalArgumentException\ is\ thrown.\ \ Finally,\ if\r\n\ the\ user\ selects\ a\ file\ and\ it\ is\ successfully\ opened,\ then\ the\ return\ value\ of\ the\r\n\ subroutine\ is\ true,\ and\ \ the\ output\ routines\ will\ write\ to\ the\ file,\ instead\ of\ \r\n\ to\ standard\ output.\ \ If\ the\ user\ cancels,\ or\ if\ an\ error\ occurs,\ then\ the\ current\r\n\ output\ destination\ is\ not\ changed.\r\n
comment11.params=
comment11.target=java.lang.String\ getInputFileName()
comment11.text=\r\n\ If\ TextIO\ is\ currently\ reading\ from\ a\ file,\ then\ the\ return\ value\ is\ the\ name\ of\ the\ file.\ \ \r\n\ If\ the\ class\ is\ reading\ from\ standard\ input\ or\ from\ a\ stream,\ then\ the\ return\ value\ is\ null.\r\n
comment12.params=
comment12.target=java.lang.String\ getOutputFileName()
comment12.text=\r\n\ If\ TextIO\ is\ currently\ writing\ to\ a\ file,\ then\ the\ return\ value\ is\ the\ name\ of\ the\ file.\ \ \r\n\ If\ the\ class\ is\ writing\ to\ standard\ output\ or\ to\ a\ stream,\ then\ the\ return\ value\ is\ null.\r\n
comment13.params=x
comment13.target=void\ put(java.lang.Object)
comment13.text=\r\n\ Write\ a\ single\ value\ to\ the\ current\ output\ destination,\ using\ the\ default\ format\r\n\ and\ no\ extra\ spaces.\ \ This\ method\ will\ handle\ any\ type\ of\ parameter,\ even\ one\r\n\ whose\ type\ is\ one\ of\ the\ primitive\ types.\r\n
comment14.params=x\ minChars
comment14.target=void\ put(java.lang.Object,\ int)
comment14.text=\r\n\ Write\ a\ single\ value\ to\ the\ current\ output\ destination,\ using\ the\ default\ format\r\n\ and\ outputting\ at\ least\ minChars\ characters\ (with\ extra\ spaces\ added\ before\ the\r\n\ output\ value\ if\ necessary).\ \ This\ method\ will\ handle\ any\ type\ of\ parameter,\ even\ one\r\n\ whose\ type\ is\ one\ of\ the\ primitive\ types.\r\n\ @param\ x\ The\ value\ to\ be\ output,\ which\ can\ be\ of\ any\ type.\r\n\ @param\ minChars\ The\ minimum\ number\ of\ characters\ to\ use\ for\ the\ output.\ \ If\ x\ requires\ fewer\r\n\ then\ this\ number\ of\ characters,\ then\ extra\ spaces\ are\ added\ to\ the\ front\ of\ x\ to\ bring\r\n\ the\ total\ up\ to\ minChars.\ \ If\ minChars\ is\ less\ than\ or\ equal\ to\ zero,\ then\ x\ will\ be\ printed\r\n\ in\ the\ minimum\ number\ of\ spaces\ possible.\r\n
comment15.params=x
comment15.target=void\ putln(java.lang.Object)
comment15.text=\r\n\ This\ is\ equivalent\ to\ put(x),\ followed\ by\ an\ end-of-line.\r\n
comment16.params=x\ minChars
comment16.target=void\ putln(java.lang.Object,\ int)
comment16.text=\r\n\ This\ is\ equivalent\ to\ put(x,minChars),\ followed\ by\ an\ end-of-line.\r\n
comment17.params=
comment17.target=void\ putln()
comment17.text=\r\n\ Write\ an\ end-of-line\ character\ to\ the\ current\ output\ destination.\r\n
comment18.params=format\ items
comment18.target=void\ putf(java.lang.String,\ java.lang.Object[])
comment18.text=\r\n\ Writes\ formatted\ output\ values\ to\ the\ current\ output\ destination.\ \ This\ method\ has\ the\r\n\ same\ function\ as\ System.out.printf();\ the\ details\ of\ formatted\ output\ are\ not\ discussed\r\n\ here.\ \ The\ first\ parameter\ is\ a\ string\ that\ describes\ the\ format\ of\ the\ output.\ \ There\r\n\ can\ be\ any\ number\ of\ additional\ parameters;\ these\ specify\ the\ values\ to\ be\ output\ and\r\n\ can\ be\ of\ any\ type.\ \ This\ method\ will\ throw\ an\ IllegalArgumentException\ if\ the\r\n\ format\ string\ is\ null\ or\ if\ the\ format\ string\ is\ illegal\ for\ the\ values\ that\ are\ being\r\n\ output.\r\n
comment19.params=
comment19.target=boolean\ eoln()
comment19.text=\r\n\ Test\ whether\ the\ next\ character\ in\ the\ current\ input\ source\ is\ an\ end-of-line.\ \ Note\ that\r\n\ this\ method\ does\ NOT\ skip\ whitespace\ before\ testing\ for\ end-of-line\ --\ if\ you\ want\ to\ do\r\n\ that,\ call\ skipBlanks()\ first.\r\n
comment2.params=inputStream
comment2.target=void\ readStream(java.io.InputStream)
comment2.text=\r\n\ After\ this\ method\ is\ called,\ input\ will\ be\ read\ from\ inputStream,\ provided\ it\r\n\ is\ non-null.\ \ If\ inputStream\ is\ null,\ then\ this\ method\ has\ the\ same\ effect\r\n\ as\ calling\ readStandardInput();\ that\ is,\ future\ input\ will\ come\ from\ the\r\n\ standard\ input\ stream.\r\n
comment20.params=
comment20.target=boolean\ eof()
comment20.text=\r\n\ Test\ whether\ the\ next\ character\ in\ the\ current\ input\ source\ is\ an\ end-of-file.\ \ Note\ that\r\n\ this\ method\ does\ NOT\ skip\ whitespace\ before\ testing\ for\ end-of-line\ --\ if\ you\ want\ to\ do\r\n\ that,\ call\ skipBlanks()\ or\ skipWhitespace()\ first.\r\n
comment21.params=
comment21.target=char\ getAnyChar()
comment21.text=\r\n\ Reads\ the\ next\ character\ from\ the\ current\ input\ source.\ \ The\ character\ can\ be\ a\ whitespace\r\n\ character;\ compare\ this\ to\ the\ getChar()\ method,\ which\ skips\ over\ whitespace\ and\ returns\ the\r\n\ next\ non-whitespace\ character.\ \ An\ end-of-line\ is\ always\ returned\ as\ the\ character\ '\\n',\ even\r\n\ when\ the\ actual\ end-of-line\ in\ the\ input\ source\ is\ something\ else,\ such\ as\ '\\r'\ or\ "\\r\\n".\r\n\ This\ method\ will\ throw\ an\ IllegalArgumentException\ if\ the\ input\ is\ at\ end-of-file\ (which\ will\ \r\n\ not\ ordinarily\ happen\ if\ reading\ from\ standard\ input).\r\n
comment22.params=
comment22.target=char\ peek()
comment22.text=\r\n\ Returns\ the\ next\ character\ in\ the\ current\ input\ source,\ without\ actually\ removing\ that\r\n\ character\ from\ the\ input.\ \ The\ character\ can\ be\ a\ whitespace\ character\ and\ can\ be\ the\r\n\ end-of-file\ character\ (specified\ by\ the\ constant\ TextIO.EOF).An\ end-of-line\ is\ always\ returned\ \r\n\ as\ the\ character\ '\\n',\ even\ when\ the\ actual\ end-of-line\ in\ the\ input\ source\ is\ something\ else,\ \r\n\ such\ as\ '\\r'\ or\ "\\r\\n".\ \ This\ method\ never\ causes\ an\ error.\r\n
comment23.params=
comment23.target=void\ skipBlanks()
comment23.text=\r\n\ Skips\ over\ any\ whitespace\ characters,\ except\ for\ end-of-lines.\ \ After\ this\ method\ is\ called,\r\n\ the\ next\ input\ character\ is\ either\ an\ end-of-line,\ an\ end-of-file,\ or\ a\ non-whitespace\ character.\r\n\ This\ method\ never\ causes\ an\ error.\ \ (Ordinarily,\ end-of-file\ is\ not\ possible\ when\ reading\ from\r\n\ standard\ input.)\r\n
comment24.params=
comment24.target=void\ skipWhitespace()
comment24.text=\r\n\ Skips\ over\ any\ whitespace\ characters,\ including\ for\ end-of-lines.\ \ After\ this\ method\ is\ called,\r\n\ the\ next\ input\ character\ is\ either\ an\ end-of-file\ or\ a\ non-whitespace\ character.\r\n\ This\ method\ never\ causes\ an\ error.\ (Ordinarily,\ end-of-file\ is\ not\ possible\ when\ reading\ from\r\n\ standard\ input.)\r\n
comment25.params=
comment25.target=byte\ getlnByte()
comment25.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ byte\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment26.params=
comment26.target=short\ getlnShort()
comment26.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ short\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment27.params=
comment27.target=int\ getlnInt()
comment27.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ int\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment28.params=
comment28.target=long\ getlnLong()
comment28.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ long\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment29.params=
comment29.target=float\ getlnFloat()
comment29.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ float\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment3.params=inputStream
comment3.target=void\ readStream(java.io.Reader)
comment3.text=\r\n\ After\ this\ method\ is\ called,\ input\ will\ be\ read\ from\ inputStream,\ provided\ it\r\n\ is\ non-null.\ \ If\ inputStream\ is\ null,\ then\ this\ method\ has\ the\ same\ effect\r\n\ as\ calling\ readStandardInput();\ that\ is,\ future\ input\ will\ come\ from\ the\r\n\ standard\ input\ stream.\r\n
comment30.params=
comment30.target=double\ getlnDouble()
comment30.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ double\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment31.params=
comment31.target=char\ getlnChar()
comment31.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ char\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ Note\ that\ the\ value\r\n\ that\ is\ returned\ will\ be\ a\ non-whitespace\ character;\ compare\ this\ with\ the\ getAnyChar()\ method.\r\n\ When\ using\ standard\ IO,\ this\ will\ not\ produce\ an\ error.\ \ In\ other\ cases,\ an\ error\ can\ occur\ if\r\n\ an\ end-of-file\ is\ encountered.\r\n
comment32.params=
comment32.target=boolean\ getlnBoolean()
comment32.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ boolean\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n\ <p>Legal\ inputs\ for\ a\ boolean\ input\ are\:\ true,\ t,\ yes,\ y,\ 1,\ false,\ f,\ no,\ n,\ and\ 0;\ letters\ can\ be\r\n\ either\ upper\ case\ or\ lower\ case.\ One\ "word"\ of\ input\ is\ read,\ using\ the\ getWord()\ method,\ and\ it\r\n\ must\ be\ one\ of\ these;\ note\ that\ the\ "word"\ \ must\ be\ terminated\ by\ a\ whitespace\ character\ (or\ end-of-file).\r\n
comment33.params=
comment33.target=java.lang.String\ getlnWord()
comment33.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ one\ "word"\ from\ input,\ discarding\ the\ rest\ of\ \r\n\ the\ current\ line\ of\ input\ (including\ the\ next\ end-of-line\ character,\ if\ any).\ \ A\ word\ is\ defined\ as\r\n\ a\ sequence\ of\ non-whitespace\ characters\ (not\ just\ letters\!).\ \ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\r\n\ if\ an\ end-of-file\ is\ encountered.\r\n
comment34.params=
comment34.target=java.lang.String\ getlnString()
comment34.text=\r\n\ This\ is\ identical\ to\ getln().\r\n
comment35.params=
comment35.target=java.lang.String\ getln()
comment35.text=\r\n\ Reads\ all\ the\ characters\ from\ the\ current\ input\ source,\ up\ to\ the\ next\ end-of-line.\ \ The\ end-of-line\r\n\ is\ read\ but\ is\ not\ included\ in\ the\ return\ value.\ \ Any\ other\ whitespace\ characters\ on\ the\ line\ are\ retained,\r\n\ even\ if\ they\ occur\ at\ the\ start\ of\ input.\ \ The\ return\ value\ will\ be\ an\ empty\ string\ if\ there\ are\r\n\ no\ characters\ before\ the\ end-of-line.\ \ When\ using\ standard\ IO,\ this\ will\ not\ produce\ an\ error.\ \ \r\n\ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ an\ end-of-file\ is\ encountered.\r\n
comment36.params=
comment36.target=byte\ getByte()
comment36.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ byte\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment37.params=
comment37.target=short\ getShort()
comment37.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ short\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment38.params=
comment38.target=int\ getInt()
comment38.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ int\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment39.params=
comment39.target=long\ getLong()
comment39.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ long\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment4.params=fileName
comment4.target=void\ readFile(java.lang.String)
comment4.text=\r\n\ Opens\ a\ file\ with\ a\ specified\ name\ for\ input.\ \ If\ the\ file\ name\ is\ null,\ this\ has\r\n\ the\ same\ effect\ as\ calling\ readStandardInput();\ that\ is,\ input\ will\ be\ read\ from\ standard\r\n\ input.\ \ If\ an\r\n\ error\ occurs\ while\ trying\ to\ open\ the\ file,\ an\ exception\ of\ type\ IllegalArgumentException\r\n\ is\ thrown,\ and\ the\ input\ source\ is\ not\ changed.\ \ If\ the\ file\ is\ opened\ \r\n\ successfully,\ then\ after\ this\ method\ is\ called,\ all\ of\ the\ input\ routines\ will\ read\ \r\n\ from\ the\ file,\ instead\ of\ from\ standard\ input.\r\n
comment40.params=
comment40.target=char\ getChar()
comment40.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ single\ non-whitespace\ character\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ an\ end-of-file\r\n\ is\ encountered.\r\n
comment41.params=
comment41.target=float\ getFloat()
comment41.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ float\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment42.params=
comment42.target=double\ getDouble()
comment42.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ double\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n
comment43.params=
comment43.target=java.lang.String\ getWord()
comment43.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ one\ "word"\ from\ input.\ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ A\ word\ is\ defined\ as\r\n\ a\ sequence\ of\ non-whitespace\ characters\ (not\ just\ letters\!).\ \ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\r\n\ if\ an\ end-of-file\ is\ encountered.\r\n
comment44.params=
comment44.target=boolean\ getBoolean()
comment44.text=\r\n\ Skips\ whitespace\ characters\ and\ then\ reads\ a\ value\ of\ type\ boolean\ from\ input.\ \ Any\ additional\ characters\ on\r\n\ the\ current\ line\ of\ input\ are\ retained,\ and\ will\ be\ read\ by\ the\ next\ input\ operation.\ \ When\ using\ standard\ IO,\r\n\ this\ will\ not\ produce\ an\ error;\ the\ user\ will\ be\ prompted\ repeatedly\ for\ input\ until\ a\ legal\ value\r\n\ is\ input.\ \ In\ other\ cases,\ an\ IllegalArgumentException\ will\ be\ thrown\ if\ a\ legal\ value\ is\ not\ found.\r\n\ <p>Legal\ inputs\ for\ a\ boolean\ input\ are\:\ true,\ t,\ yes,\ y,\ 1,\ false,\ f,\ no,\ n,\ and\ 0;\ letters\ can\ be\r\n\ either\ upper\ case\ or\ lower\ case.\ One\ "word"\ of\ input\ is\ read,\ using\ the\ getWord()\ method,\ and\ it\r\n\ must\ be\ one\ of\ these;\ note\ that\ the\ "word"\ \ must\ be\ terminated\ by\ a\ whitespace\ character\ (or\ end-of-file).\r\n
comment45.params=
comment45.target=java.lang.String\ readRealString()
comment46.params=
comment46.target=java.lang.String\ readIntegerString()
comment47.params=min\ max
comment47.target=long\ readInteger(long,\ long)
comment48.params=message\ expecting
comment48.target=void\ errorMessage(java.lang.String,\ java.lang.String)
comment49.params=
comment49.target=char\ lookChar()
comment5.params=
comment5.target=boolean\ readUserSelectedFile()
comment5.text=\r\n\ Puts\ a\ GUI\ file-selection\ dialog\ box\ on\ the\ screen\ in\ which\ the\ user\ can\ select\r\n\ an\ input\ file.\ \ If\ the\ user\ cancels\ the\ dialog\ instead\ of\ selecting\ a\ file,\ it\ is\r\n\ not\ considered\ an\ error,\ but\ the\ return\ value\ of\ the\ subroutine\ is\ false.\r\n\ If\ the\ user\ does\ select\ a\ file,\ but\ there\ is\ an\ error\ while\ trying\ to\ open\ the\r\n\ file,\ then\ an\ exception\ of\ type\ IllegalArgumentException\ is\ thrown.\ \ Finally,\ if\r\n\ the\ user\ selects\ a\ file\ and\ it\ is\ successfully\ opened,\ then\ the\ return\ value\ of\ the\r\n\ subroutine\ is\ true,\ and\ \ the\ input\ routines\ will\ read\ from\ the\ file,\ instead\ of\ \r\n\ from\ standard\ input.\ \ \ If\ the\ user\ cancels,\ or\ if\ any\ error\ occurs,\ then\ the\r\n\ previous\ input\ source\ is\ not\ changed.\r\n\ <p>NOTE\:\ Calling\ this\ method\ starts\ a\ GUI\ user\ interface\ thread,\ which\ can\ continue\r\n\ to\ run\ even\ if\ the\ thread\ that\ runs\ the\ main\ program\ ends.\ \ If\ you\ use\ this\ method\r\n\ in\ a\ non-GUI\ program,\ it\ might\ be\ necessary\ to\ call\ System.exit(0)\ at\ the\ end\ of\ the\ main()\ \r\n\ routine\ to\ shut\ down\ the\ Java\ virtual\ machine\ completely.\r\n
comment50.params=
comment50.target=char\ readChar()
comment51.params=
comment51.target=void\ fillBuffer()
comment52.params=
comment52.target=void\ emptyBuffer()
comment53.params=message
comment53.target=void\ outputError(java.lang.String)
comment6.params=
comment6.target=void\ writeStandardOutput()
comment6.text=\r\n\ After\ this\ method\ is\ called,\ output\ will\ be\ written\ to\ standard\ output\ (as\ it\ \r\n\ is\ in\ the\ default\ state).\ \ If\ a\ file\ or\ stream\ was\ previously\ open\ for\ output,\ it\r\n\ will\ be\ closed.\r\n
comment7.params=outputStream
comment7.target=void\ writeStream(java.io.OutputStream)
comment7.text=\r\n\ After\ this\ method\ is\ called,\ output\ will\ be\ sent\ to\ outputStream,\ provided\ it\r\n\ is\ non-null.\ \ If\ outputStream\ is\ null,\ then\ this\ method\ has\ the\ same\ effect\r\n\ as\ calling\ writeStandardOutput();\ that\ is,\ future\ output\ will\ be\ sent\ to\ the\r\n\ standard\ output\ stream.\r\n
comment8.params=outputStream
comment8.target=void\ writeStream(java.io.PrintWriter)
comment8.text=\r\n\ After\ this\ method\ is\ called,\ output\ will\ be\ sent\ to\ outputStream,\ provided\ it\r\n\ is\ non-null.\ \ If\ outputStream\ is\ null,\ then\ this\ method\ has\ the\ same\ effect\r\n\ as\ calling\ writeStandardOutput();\ that\ is,\ future\ output\ will\ be\ sent\ to\ the\r\n\ standard\ output\ stream.\r\n
comment9.params=fileName
comment9.target=void\ writeFile(java.lang.String)
comment9.text=\r\n\ Opens\ a\ file\ with\ a\ specified\ name\ for\ output.\ \ If\ the\ file\ name\ is\ null,\ this\ has\r\n\ the\ same\ effect\ as\ calling\ writeStandardOutput();\ that\ is,\ output\ will\ be\ sent\ to\ standard\r\n\ output.\ \ If\ an\r\n\ error\ occurs\ while\ trying\ to\ open\ the\ file,\ an\ exception\ of\ type\ IllegalArgumentException\r\n\ is\ thrown.\ \ If\ the\ file\ is\ opened\ successfully,\ then\ after\ this\ method\ is\ called,\r\n\ all\ of\ the\ output\ routines\ will\ write\ to\ the\ file,\ instead\ of\ to\ \ standard\ output.\r\n\ If\ an\ error\ occurs,\ the\ output\ destination\ is\ not\ changed.\r\n\ <p>NOTE\:\ Calling\ this\ method\ starts\ a\ GUI\ user\ interface\ thread,\ which\ can\ continue\r\n\ to\ run\ even\ if\ the\ thread\ that\ runs\ the\ main\ program\ ends.\ \ If\ you\ use\ this\ method\r\n\ in\ a\ non-GUI\ program,\ it\ might\ be\ necessary\ to\ call\ System.exit(0)\ at\ the\ end\ of\ the\ main()\ \r\n\ routine\ to\ shut\ down\ the\ Java\ virtual\ machine\ completely.\r\n
numComments=54
